/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

/ {
    behaviors {
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        ht_tp: holdtap_tappreferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREFERRED";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&magic 1 0        &kp LS(LA(LC(LG(F13))))  &kp C_PREV         &kp C_NEXT        &kp C_PP                                                                                                                                              &kp C_MUTE          &kp C_VOL_DN      &kp C_VOL_UP       &kp LS(LC(LA(LG(F14))))  &magic 1 0
&kp ESCAPE        &kp N1                   &kp N2             &kp N3            &kp N4               &kp N5                                                                                                                   &kp N6  &kp N7              &kp N8            &kp N9             &kp N0                   &kp DEL
&kp TAB           &kp Q                    &kp W              &kp E             &kp R                &kp T                                                                                                                    &kp Y   &kp U               &kp I             &kp O              &kp P                    &kp BACKSPACE
&kp LEFT_CONTROL  &kp A                    &kp S              &kp D             &kp F                &kp G                                                                                                                    &kp H   &kp J               &kp K             &kp L              &kp SEMI                 &ht_tp LEFT_CONTROL SQT
&lm 5 LEFT_SHIFT  &kp Z                    &kp X              &kp C             &kp V                &kp B   &kp ESC    &kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT  &layer_td       &kp PAGE_UP    &kp LC(LG(Q))     &kp LA(SPACE)  &kp N   &kp M               &kp COMMA         &kp DOT            &kp FSLH                 &lm 5 LEFT_SHIFT
&none             &mo 3                    &ht_tp LALT GRAVE  &ht_tp LGUI BSLH  &ht_tp LSHIFT EQUAL          &kp SPACE  &kp LEFT_COMMAND                      &kp LEFT_ALT    &kp PAGE_DOWN  &lm 5 LEFT_SHIFT  &lt 3 ENTER            &ht_tp LSHIFT LBKT  &ht_tp LGUI RBKT  &ht_tp LALT MINUS  &mo 3                    &none
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &to 3
            >;
        };

        num_pad {
            bindings = <
&trans  &trans       &trans     &trans        &trans                                                                                   &trans    &trans    &trans     &trans  &trans
&trans  &none        &none      &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY                                                    &trans  &trans    &trans    &trans     &trans  &trans
&trans  &kp LPAR     &kp KP_N7  &kp KP_N8     &kp KP_N9     &kp KP_MINUS                                                       &trans  &none     &kp UP    &none      &trans  &trans
&trans  &kp RPAR     &kp KP_N4  &kp KP_N5     &kp KP_N6     &kp KP_PLUS                                                        &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &kp PERCENT  &kp KP_N1  &kp KP_N2     &kp KP_N3     &kp KP_ENTER     &trans  &trans  &to 0     &trans  &trans  &trans  &trans  &trans    &trans    &trans     &trans  &trans
&trans  &trans       &kp COMMA  &kp KP_N0     &kp KP_DOT                     &trans  &trans  &trans    &trans  &trans  &trans          &trans    &trans    &trans     &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans     &trans    &trans    &trans                                                                               &trans    &trans    &trans     &trans     &trans
&trans  &kp F1     &kp F2    &kp F3    &kp F4     &kp F5                                                          &kp F6    &kp F7    &kp F8    &kp F9     &kp F10    &trans
&trans  &trans     &trans    &kp UP    &trans     &trans                                                          &trans    &trans    &kp UP    &trans     &trans     &trans
&trans  &kp PG_UP  &kp LEFT  &kp DOWN  &kp RIGHT  &kp HOME                                                        &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_UP  &trans
&trans  &kp PG_DN  &trans    &trans    &trans     &kp END   &kp F11    &kp F12  &trans    &trans  &trans  &trans  &kp END   &trans    &trans    &trans     &kp PG_DN  &trans
&trans  &trans     &trans    &trans    &trans               &kp MINUS  &trans   &trans    &trans  &trans  &trans            &kp LPAR  &kp RPAR  &trans     &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                     &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                      &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                    &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0     &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans    &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        shift {
            bindings = <
&trans    &trans  &trans  &trans  &trans                                                                       &trans  &trans  &trans  &trans  &trans
&trans    &trans  &trans  &trans  &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans    &trans  &trans  &trans  &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans    &trans  &trans  &trans  &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&kp LPAR  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp RPAR
&trans    &trans  &trans  &trans  &trans          &kp UNDER  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
